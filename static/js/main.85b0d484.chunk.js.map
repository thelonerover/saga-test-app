{"version":3,"sources":["components/Tickers/Tickers.module.scss","components/Link/Link.module.scss","features/ticker/Ticker.module.scss","components/Links/Links.module.scss","components/Loader/Loader.module.scss","features/ticker/tickerSlice.js","features/ticker/Ticker.js","components/Tickers/index.js","components/Link/index.js","components/Links/index.js","components/Loader/index.js","components/App/index.js","app/rootReducer.js","constants.js","app/sagas.js","app/store.js","index.js"],"names":["module","exports","idIndex","tickerSlice","createSlice","name","initialState","posts","loading","reducers","getRandomPosts","state","getRandomPostsSuccess","action","find","post","id","payload","like","getRandomPostsFailure","deletePostItem","filter","likePost","map","actions","Button","value","subreddit","dispatch","useDispatch","text","padStart","className","styles","ticker","onClick","handleClick","toLowerCase","Tickers","list","listItem","Ticker","Link","url","title","useSelector","button","handleLike","handleDelete","href","target","rel","link","Links","links","Loader","loader","App","rootReducer","combineReducers","tickersReducer","domain","fetchRandomPost","watchfetchRandomPost","fetch","data","json","postData","children","permalink","put","type","error","takeEvery","persistConfig","key","version","storage","persistedReducer","persistReducer","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","run","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85b0d484.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Tickers_list__1STeo\",\"listItem\":\"Tickers_listItem__QGtHY\",\"ticker\":\"Tickers_ticker__1F-Bm\",\"tickerReverse\":\"Tickers_tickerReverse__IOfGm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Link_listItem__1aU6g\",\"appear\":\"Link_appear__qtvAK\",\"link\":\"Link_link__3X_6G\",\"button\":\"Link_button__ybcy-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ticker\":\"Ticker_ticker__1nCgk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"Links_links__3EEF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__2bMtS\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { posts: [], loading: false };\r\n\r\nlet idIndex = 0;\r\n\r\nexport const tickerSlice = createSlice({\r\n    name: 'ticker',\r\n    initialState,\r\n    reducers: {\r\n        getRandomPosts(state) {\r\n            state.loading = true;\r\n        },\r\n        getRandomPostsSuccess(state, action) {\r\n            if (state.posts.find(post => post.id === action.payload.id)) {\r\n                state.posts = [...state.posts, { ...action.payload, id: action.payload.id + idIndex++, like: false }];\r\n            } else {\r\n                state.posts = [...state.posts, { ...action.payload, like: false }];\r\n            }\r\n\r\n            state.loading = false;\r\n        },\r\n        getRandomPostsFailure(state) {\r\n            state.loading = false;\r\n        },\r\n        deletePostItem(state, action) {\r\n            state.posts = state.posts.filter(post => post.id !== action.payload);\r\n        },\r\n        likePost(state, action) {\r\n            state.posts = state.posts.map(post => {\r\n                if (post.id === action.payload) {\r\n                    post.like = !post.like;\r\n                }\r\n\r\n                return post;\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nexport const { getRandomPosts, deletePostItem, likePost } = tickerSlice.actions;\r\n\r\nexport default tickerSlice.reducer;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getRandomPosts } from './tickerSlice';\r\nimport styles from './Ticker.module.scss';\r\n\r\nconst Button = ({ value, subreddit }) => {\r\n    const dispatch = useDispatch();\r\n    const text = value.padStart(200, `${value}-`);\r\n    \r\n    const handleClick = subreddit => () => {\r\n        dispatch(getRandomPosts(subreddit))\r\n    };\r\n\r\n    return (\r\n        <span className={styles.ticker} onClick={handleClick(subreddit.toLowerCase())}>{text}</span>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Ticker from '../../features/ticker/Ticker';\r\nimport styles from './Tickers.module.scss';\r\n\r\nfunction Tickers() {\r\n  return (\r\n    <ul className={styles.list}>\r\n        <li className={styles.listItem}><Ticker value={'frontend'} subreddit={'frontend'} /></li>\r\n        <li className={styles.listItem}><Ticker value={'react.js'} subreddit={'reactjs'} /></li>\r\n        <li className={styles.listItem}><Ticker value={'vue.js'} subreddit={'vuejs'} /></li>\r\n        <li className={styles.listItem}><Ticker value={'angular'} subreddit={'angular'} /></li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Tickers;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deletePostItem, likePost } from '../../features/ticker/tickerSlice';\r\nimport styles from './Link.module.scss';\r\n\r\nconst Link = ({ id, url, title }) => {\r\n    const post = useSelector(state => state.ticker.posts).find(post => post.id === id);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDelete = (id) => () => {\r\n        dispatch(deletePostItem(id))\r\n    };\r\n\r\n    const handleLike = (id) => () => {\r\n        dispatch(likePost(id))\r\n    };\r\n\r\n    return (\r\n        <li className={styles.listItem}>\r\n            <span className={styles.button} onClick={handleLike(id)}>{post.like ? '♥' : '♡'}</span>\r\n            <span className={styles.button} onClick={handleDelete(id)}>⨉</span>\r\n            <a href={url} target='_blank' rel='noreferrer' className={styles.link}>{title}</a>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Link;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Link from '../Link';\r\nimport styles from './Links.module.scss';\r\n\r\nconst Links = () => {\r\n    const posts = useSelector(state => state.ticker.posts);\r\n\r\n    return (\r\n        <ul className={styles.links}>\r\n            { posts && posts.map(post => <Link key={post.id} {...post} />) }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default Links;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styles from './Loader.module.scss';\r\n\r\nfunction Loader() {\r\n  const loading = useSelector(state => state.ticker.loading);\r\n\r\n  return (\r\n    <div>\r\n      {loading && <span className={styles.loader}>Loading</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport Tickers from '../Tickers';\r\nimport Links from '../Links';\r\nimport Loader from '../Loader';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Tickers />\r\n        <Links />\r\n      <Loader />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { combineReducers } from '@reduxjs/toolkit';\r\nimport tickersReducer from '../features/ticker/tickerSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n    ticker: tickersReducer\r\n});\r\n\r\nexport default rootReducer;","export const domain = 'https://www.reddit.com';","import { put, takeEvery, select } from 'redux-saga/effects';\r\nimport { domain } from '../constants';\r\n\r\nfunction* fetchRandomPost(action) {\r\n  try {\r\n    let data = yield fetch(`${domain}/r/${action.payload}/random.json?query=javascript`);\r\n    data = yield data.json();\r\n    const postData = {\r\n      url: domain + data[0].data.children[0].data.permalink,\r\n      id: data[0].data.children[0].data.id,\r\n      title: data[0].data.children[0].data.title\r\n    }\r\n\r\n    yield put({ type: 'ticker/getRandomPostsSuccess', payload: postData });\r\n  } catch (error) {\r\n    yield put({ type: 'ticker/getRandomPostsFailure', error });\r\n  }\r\n}\r\n\r\nexport function* watchfetchRandomPost() {\r\n  yield takeEvery('ticker/getRandomPosts', fetchRandomPost);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from '../app/rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { watchfetchRandomPost } from './sagas';\r\nimport {\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  version: 1,\r\n  storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }).concat(sagaMiddleware),\r\n});\r\n\r\nsagaMiddleware.run(watchfetchRandomPost);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nlet persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}